The main changes you need to make to your code to incorporate the new comparison logic are in the section where you perform the merging and comparison of the two dataframes. The changes begin after the lines where you've created your `df_bigquery` and `df_salesforce` and end before you create your `summary_df`.

Here is your updated code:

```python
    # BigQuery
    df_bigquery = client.query(bigquery_query).to_dataframe()
    df_bigquery = df_bigquery.astype(str)  # This line converts all columns to strings
    bigquery_record_count = len(df_bigquery)

    # Salesforce
    sf_data = sf.query_all(salesforce_query)
    salesforce_record_count = sf_data['totalSize']

    # ... some code skipped ...

    # Rename the columns in df_salesforce and df_bigquery based on the index mapping
    index_mapping_inverse = {v: k for k, v in index_mapping.items()}
    df_salesforce.rename(columns=index_mapping_inverse, inplace=True)
    df_bigquery.rename(columns=index_mapping_inverse, inplace=True)

    # Change to lower case
    index_mapping = {k.lower(): v.lower() for k, v in index_mapping.items()}

    # Perform an outer join
    full_df = pd.merge(df_bigquery, df_salesforce, how='outer')

    # Create a Boolean mask where each value indicates whether the row is identical across both DataFrames
    identical_mask = full_df.apply(lambda row: row[df_bigquery.columns].equals(row[df_salesforce.columns]), axis=1)

    # Use the mask to separate the identical and different rows
    identical_df = full_df[identical_mask]
    different_df = full_df[~identical_mask]

    # Count the total, matching, and non-matching rows
    total_rows = len(full_df)
    matching_rows = len(identical_df)
    non_matching_rows = total_rows - matching_rows

    # Prepare the test status
    test_status = 'Pass' if non_matching_rows == 0 else 'Fail'

    # Write the full results DataFrame to a CSV file
    full_df.to_csv(os.path.join(results_dir, f'{test_name}_full_results.csv'), index=True)

    # Write the different rows to a separate CSV file
    different_df.to_csv(os.path.join(results_dir, f'{test_name}_differences.csv'), index=True)

    # Log the differences between datasets
    log_message = "Differences between datasets: {}".format(different_df) 
    logging.info(log_message)

    # Check if the DataFrames are equal
    if test_status == 'Pass':
        log_message = f"Test {test_name} Passed: Both BigQuery and Salesforce results match."
    else:
        log_message = f"Test {test_name} Failed: BigQuery and Salesforce results do not match."
        failed_tests.append(f"Test {test_name} Failed: BigQuery and Salesforce results do not match.")

    # Compute total and matching rows
    total_rows1 = bigquery_record_count + salesforce_record_count

    # Prepare the summary dataframe
    summary_df = pd.DataFrame({
        'Test_Name': [test_name],
        'Test Status': [test_status],
        'Total Rows': [total_rows1],
        'Matching Rows': [matching_rows],
        'Non-matching Rows': [non_matching_rows],
        'BigQuery Record Count': [bigquery_record_count],
        'Ncino Record Count': [salesforce_record_count]
    }, index=[0])

    # collect results for summary
    total_tests += 1
    if test_status == 'Pass':
        total_passed += 1
    else:
        total_failed
