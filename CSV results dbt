import re
import pandas as pd

def process_test_logs(file):
    with open(file, 'r') as f:
        log_data = f.read()

    test_results = []

    pass_pattern = re.compile(r"(\d+) of \d+ PASS (?P<test>[\w\-]+) .*")
    fail_pattern = re.compile(r"(\d+) of \d+ FAIL .*? (?P<test>[\w\-]+) .*")
    error_pattern = re.compile(r"(\d+) of \d+ ERROR (?P<test>[\w\-]+) .*")

    for match in pass_pattern.finditer(log_data):
        test_results.append({
            'test': match.group('test'),
            'status': 'PASS'
        })

    for match in fail_pattern.finditer(log_data):
        test_results.append({
            'test': match.group('test'),
            'status': 'FAIL'
        })

    for match in error_pattern.finditer(log_data):
        test_results.append({
            'test': match.group('test'),
            'status': 'ERROR'
        })

    return test_results

def generate_csv_report(results, output_file):
    df = pd.DataFrame(results)
    summary_df = df['status'].value_counts().reset_index().rename(columns={'index': 'status', 'status': 'count'})
    summary_df.to_csv(output_file, index=False)
    with open(output_file, 'a') as f:
        f.write("\n\nDetailed Results:\n")
    df.to_csv(output_file, mode='a', index=False)

# Process the test logs and generate the test results
test_results = process_test_logs('dbt_test_output.log')

# Generate the CSV report
generate_csv_report(test_results, 'dbt_test_results.csv')
